<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/cache
       http://www.springframework.org/schema/cache/spring-cache.xsd">

    <!--
    ①@Repository/@Service/@Component由Spring扫描
    ②@Controller由SpringMVC扫描
    -->
    <context:component-scan base-package="*.mapper"/>

    <!-- context开启注解 -->
    <context:annotation-config/>

    <!--************************************************************分割线************************************************************-->

    <!-- 引入配置 -->
    <context:property-placeholder location="classpath:config/application.properties"/>

    <!-- 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- Druid输出到监控面板/Log4J -->
        <!--<property name="filters" value="stat,log4j"/>-->
        <!-- 慢查询 -->
        <property name="proxyFilters" ref="slowFilter"/>
    </bean>

    <!-- fixme Druid监控数据无法持久化/输出到Log4J的数据格式化 -->
    <bean id="slowFilter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="100"/><!-- 超过100毫秒即为慢查询 -->
        <property name="logSlowSql" value="true"/>
    </bean>

    <!--************************************************************半分割线******************************-->

    <!--
    原生MyBatis配置（新版）
    ①新版只需要在Spring中配置，不需要MyBatis的单独配置文件
    ②Dao/Mapper只写接口，不需要实现类
    ③搭配MyBatis Generator生成通用方法
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:config/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!--
        pagehelper插件
        ①可以在MyBatis单独配置中配置，也可以在Spring中配置（二选一）
        ②PageInterceptor的property>value哪怕值为空也必须要写，否则报错
        -->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            params=value1
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="*.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--************************************************************分割线************************************************************-->

    <!-- 配置EhCache+CacheManager+注解配置 -->
    <bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:config/ehcache.xml"/>
    </bean>

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcache"/><!-- ref而非value（XML配置装配错误） -->
    </bean>

    <!-- 启用注解配置缓存 -->
    <cache:annotation-driven cache-manager="cacheManager"/>

</beans>
